[
  {
    "name": "Website",
    "headings": [
      {
        "title": "# Title",
        "description": "[{You don't need to mention about files structure here}]This is a desktop application where user can login in a secured environment to select from various ai models such as Openai, Llama, Gemini, Claude, Perplexity, upon entering their apikeys, user can provide directory to their project, user can select from various templates present for readme then ai would do the job to build the readme out of it for the project, user can save the readme file on their computer aswell. The application is built using NextronJS, ElectronJS, TailwindCSS and utilizes APIs from Clerk, Openai, Gemini, Claude, Llama and Perplexity to generate README files."
      },
      {
        "title": "## Overview",
        "description": "This project is a desktop application built using NextronJS and TailwindCSS, allowing users to generate professional README files for their projects with the help of various AI models such as OpenAI, Llama, Gemini, Claude, Perplexity, and more. Users can select their preferred AI model, provide their API keys, specify the project directory, and choose from a range of README templates. The AI will then generate a comprehensive README file based on the user's selections. Users can conveniently save the generated README file to their computer."
      },
      {
        "title": "## Dependencies",
        "description": "The project requires the following dependencies:\n-NextronJS\n-ElectronJS\n-TailwindCSS\n-Openai API\n-Gemini API\n-Claude API\n-Llama API\n-Perplexity API"
      },
      {
        "title": "## Usage",
        "description": "1. Ensure all dependencies are installed. You can install all dependencies by running `npm install` in the project's root directory.\n2. Build the application by running `npm run build` in the project's root directory.\n3. Launch the application by running `npm run start` in the project's root directory. \nYou will be greeted with the OneAI application. \n4. Provide your API keys for various AI models like OpenAI, Llama, Gemini, Claude, Perplexity.\n5. Select the desired template for your README file.\n6. Provide the directory to your project.\n7. OneAI will generate the README file based on your selections and save it to your computer. You can edit and customize the generated README file as needed."
      },
      {
        "title": "## Code Structure",
        "description": "- `.git`: Contains version control information for the project.\n- `electron-builder.yml`: Configuration file for Electron Builder, used to package the application for different platforms.\n- `main`: Contains the main process code for the Electron application.\n- `background.ts`: Handles background tasks and communication with the renderer process.\n- `helpers`: Contains helper functions for creating windows and managing the application.\n- `create-window.ts`: Creates the main application window.\n- `index.ts`: Main helper functions file.\n- `preload.ts`: Preload script injected into the renderer process to provide additional functionalities.\n- `package-lock.json`: Contains information about the project's dependencies and their versions.\n- `package.json`: The project's manifest file, defining dependencies, scripts, and other configuration.\n- `README.md`: This file, providing information about the project.\n- `renderer`: Contains the frontend code built with Next.js, Electron, and TailwindCSS.\n- `.env.local`: Environment variables specific to the development environment.\n- `components`: Contains reusable UI components.\n- `Chat.tsx`: Component for displaying and managing the chat interface.\n- `middleware.ts`: Middleware functions to handle requests and responses.\n- `next-env.d.ts`: Type definitions for Next.js environment variables.\n- `next.config.js`: Configuration file for Next.js, defining build settings and optimizations.\n- `pages`: Contains the application's pages.\n- `api`: Contains API routes for handling file operations and interacting with AI models.\n- `readfile.ts`: Route for reading files from the user's project directory.\n- `savefile.ts`: Route for saving the generated README file.\n- `[model].ts`: Route for interacting with specific AI models based on the provided API keys.\n- `home.tsx`: The main landing page of the application.\n- `_app.tsx`: The application's main component.\n- `postcss.config.js`: Configuration file for PostCSS, defining styling rules and plugins.\n- `preload.d.ts`: Type definitions for the preload script.\n- `public`: Contains static assets for the application.\n- `images`: Contains images for the application.\n- `logo.png`: The application's logo.\n- `template.json`: Contains pre-defined README templates for users to select from.\n- `styles`: Contains global styles for the application.\n- `globals.css`: Global CSS styles.\n- `tailwind.config.js`: Configuration file for TailwindCSS, defining the styling framework.\n- `tsconfig.json`: TypeScript configuration file, defining compiler settings.\n- `resources`: Contains icons for the application.\n- `icon.icns`: Icon for macOS.\n- `icon.ico`: Icon for Windows.\n- `tsconfig.json`: TypeScript configuration file for the main process."
      },
      {
        "title": "## How to Contribute",
        "description": "Contributions to this project are welcome! If you have any suggestions, improvements, or bug fixes, please feel free to create issues or pull requests."
      },
      {
        "title": "## License",
        "description": "This project is licensed under the [MIT License](https://opensource.org/licenses/MIT). Feel free to modify and distribute the code as per the terms of the license."
      }
    ]
  }
]
